{
  "name": "RAI AI Mobile App Preview",
  "description": "Mobile app MVP for smart farming with AI-powered features",
  "dependencies": {
    "expo": "~49.0.0",
    "expo-status-bar": "~1.6.0",
    "react": "18.2.0",
    "react-native": "0.72.6",
    "@expo/vector-icons": "^13.0.0"
  },
  "files": {
    "App.js": {
      "type": "CODE",
      "contents": "import React, { useState, useEffect } from 'react';\r\nimport { \r\n  View, \r\n  Text, \r\n  StyleSheet, \r\n  TouchableOpacity, \r\n  ScrollView, \r\n  SafeAreaView, \r\n  StatusBar,\r\n  TextInput,\r\n  FlatList,\r\n  Image,\r\n  Alert,\r\n  ActivityIndicator,\r\n  RefreshControl,\r\n  Dimensions\r\n} from 'react-native';\r\nimport { Ionicons } from '@expo/vector-icons';\r\n\r\nconst { width } = Dimensions.get('window');\r\n\r\n// MVP Configuration\r\nconst MVP = true;\r\nconst LIMITS = { maxFields: 1, maxScansPerDay: 1, maxAlerts: 1 };\r\n\r\n// Mock data for demonstration\r\nconst mockData = {\r\n  fields: [\r\n    {\r\n      id: '1',\r\n      name: 'ไร่นาข้าว ภาคกลาง',\r\n      area: 5.2,\r\n      location: { lat: 14.97, lng: 102.08 },\r\n      soilType: 'ดินร่วนปนทราย',\r\n      crops: [\r\n        {\r\n          id: '1',\r\n          name: 'ข้าวหอมมะลิ',\r\n          type: 'rice',\r\n          variety: 'ข้าวหอมมะลิ 105',\r\n          plantingDate: '2024-01-15',\r\n          expectedHarvestDate: '2024-04-15',\r\n          status: 'growing',\r\n          healthScore: 85,\r\n          growthStage: 'vegetative'\r\n        }\r\n      ],\r\n      lastIrrigation: '2024-01-20',\r\n      irrigationSchedule: {\r\n        frequency: 3,\r\n        duration: 30,\r\n        waterAmount: 1000,\r\n        isActive: true,\r\n        nextIrrigation: '2024-01-23'\r\n      }\r\n    }\r\n  ],\r\n  weather: {\r\n    current: {\r\n      temperature: 28,\r\n      humidity: 65,\r\n      condition: 'Partly Cloudy',\r\n      icon: 'partly-sunny'\r\n    },\r\n    forecast: [\r\n      { day: 'วันนี้', temp: 28, condition: 'Partly Cloudy', icon: 'partly-sunny' },\r\n      { day: 'พรุ่งนี้', temp: 30, condition: 'Sunny', icon: 'sunny' },\r\n      { day: 'วันศุกร์', temp: 26, condition: 'Rainy', icon: 'rainy' },\r\n      { day: 'วันเสาร์', temp: 24, condition: 'Cloudy', icon: 'cloudy' }\r\n    ]\r\n  },\r\n  prices: [\r\n    { commodity: 'ข้าวหอมมะลิ', price: 8500, unit: 'บาท/ตัน', change: '+2.5%' },\r\n    { commodity: 'ข้าวเจ้า', price: 7800, unit: 'บาท/ตัน', change: '+1.2%' },\r\n    { commodity: 'ข้าวเหนียว', price: 8200, unit: 'บาท/ตัน', change: '-0.8%' }\r\n  ],\r\n  tasks: [\r\n    { id: '1', title: 'ตรวจสอบความชื้นในดิน', subtitle: 'ควรตรวจสอบทุก 3 วัน', status: 'pending', action: 'view' },\r\n    { id: '2', title: 'รดน้ำแปลงข้าว', subtitle: 'กำหนดการรดน้ำครั้งต่อไป', status: 'pending', action: 'view' },\r\n    { id: '3', title: 'ตรวจสอบโรคพืช', subtitle: 'สแกนใบข้าวเพื่อตรวจโรค', status: 'completed', action: 'view' }\r\n  ]\r\n};\r\n\r\nexport default function App() {\r\n  const [activeTab, setActiveTab] = useState('home');\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const onRefresh = () => {\r\n    setRefreshing(true);\r\n    setTimeout(() => setRefreshing(false), 1000);\r\n  };\r\n\r\n  const handleScan = () => {\r\n    Alert.alert(\r\n      'สแกนโรคพืช',\r\n      'ฟีเจอร์นี้จะใช้กล้องเพื่อสแกนใบข้าวและตรวจสอบโรคพืช',\r\n      [\r\n        { text: 'ยกเลิก', style: 'cancel' },\r\n        { text: 'สแกน', onPress: () => setLoading(true) }\r\n      ]\r\n    );\r\n  };\r\n\r\n  const renderHomeScreen = () => (\r\n    <ScrollView \r\n      style={styles.container}\r\n      refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} />}\r\n    >\r\n      {/* Header */}\r\n      <View style={styles.header}>\r\n        <Text style={styles.headerTitle}>ไร่ AI</Text>\r\n        <Text style={styles.headerSubtitle}>ระบบเกษตรอัจฉริยะ</Text>\r\n      </View>\r\n\r\n      {/* Weather Card */}\r\n      <View style={styles.card}>\r\n        <View style={styles.cardHeader}>\r\n          <Ionicons name=\"partly-sunny\" size={24} color=\"#4CAF50\" />\r\n          <Text style={styles.cardTitle}>สภาพอากาศ</Text>\r\n        </View>\r\n        <View style={styles.weatherInfo}>\r\n          <Text style={styles.temperature}>{mockData.weather.current.temperature}°C</Text>\r\n          <Text style={styles.condition}>{mockData.weather.current.condition}</Text>\r\n          <Text style={styles.humidity}>ความชื้น {mockData.weather.current.humidity}%</Text>\r\n        </View>\r\n        <View style={styles.forecast}>\r\n          {mockData.weather.forecast.map((day, index) => (\r\n            <View key={index} style={styles.forecastItem}>\r\n              <Text style={styles.forecastDay}>{day.day}</Text>\r\n              <Ionicons name={day.icon} size={20} color=\"#666\" />\r\n              <Text style={styles.forecastTemp}>{day.temp}°</Text>\r\n            </View>\r\n          ))}\r\n        </View>\r\n      </View>\r\n\r\n      {/* Field Card */}\r\n      <View style={styles.card}>\r\n        <View style={styles.cardHeader}>\r\n          <Ionicons name=\"location\" size={24} color=\"#4CAF50\" />\r\n          <Text style={styles.cardTitle}>แปลงข้าว</Text>\r\n        </View>\r\n        <View style={styles.fieldInfo}>\r\n          <Text style={styles.fieldName}>{mockData.fields[0].name}</Text>\r\n          <Text style={styles.fieldArea}>พื้นที่ {mockData.fields[0].area} ไร่</Text>\r\n          <Text style={styles.fieldSoil}>ดิน: {mockData.fields[0].soilType}</Text>\r\n          <View style={styles.cropInfo}>\r\n            <Text style={styles.cropName}>{mockData.fields[0].crops[0].name}</Text>\r\n            <Text style={styles.cropStatus}>สถานะ: {mockData.fields[0].crops[0].status}</Text>\r\n            <Text style={styles.cropHealth}>สุขภาพ: {mockData.fields[0].crops[0].healthScore}%</Text>\r\n          </View>\r\n        </View>\r\n      </View>\r\n\r\n      {/* Tasks Card */}\r\n      <View style={styles.card}>\r\n        <View style={styles.cardHeader}>\r\n          <Ionicons name=\"list\" size={24} color=\"#4CAF50\" />\r\n          <Text style={styles.cardTitle}>งานที่ต้องทำ</Text>\r\n        </View>\r\n        {mockData.tasks.map(task => (\r\n          <View key={task.id} style={styles.taskItem}>\r\n            <View style={styles.taskInfo}>\r\n              <Text style={styles.taskTitle}>{task.title}</Text>\r\n              <Text style={styles.taskSubtitle}>{task.subtitle}</Text>\r\n            </View>\r\n            <TouchableOpacity \r\n              style={[\r\n                styles.taskButton,\r\n                task.status === 'completed' ? styles.taskButtonCompleted : styles.taskButtonPending\r\n              ]}\r\n            >\r\n              <Ionicons \r\n                name={task.action === 'view' ? 'eye' : 'checkmark'} \r\n                size={16} \r\n                color={task.status === 'completed' ? '#666' : '#4CAF50'} \r\n              />\r\n              <Text style={[\r\n                styles.taskButtonText,\r\n                task.status === 'completed' ? styles.taskButtonTextCompleted : styles.taskButtonTextPending\r\n              ]}>\r\n                {task.action === 'view' ? 'ดู' : 'เสร็จ'}\r\n              </Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n        ))}\r\n      </View>\r\n\r\n      {/* Scan Button */}\r\n      <TouchableOpacity style={styles.scanButton} onPress={handleScan}>\r\n        <Ionicons name=\"scan\" size={24} color=\"white\" />\r\n        <Text style={styles.scanButtonText}>สแกนโรคพืช</Text>\r\n      </TouchableOpacity>\r\n    </ScrollView>\r\n  );\r\n\r\n  const renderFieldsScreen = () => (\r\n    <ScrollView style={styles.container}>\r\n      <View style={styles.header}>\r\n        <Text style={styles.headerTitle}>จัดการแปลง</Text>\r\n        <Text style={styles.headerSubtitle}>แปลงข้าวของคุณ</Text>\r\n      </View>\r\n\r\n      {mockData.fields.map(field => (\r\n        <View key={field.id} style={styles.fieldCard}>\r\n          <View style={styles.fieldHeader}>\r\n            <Ionicons name=\"location\" size={24} color=\"#4CAF50\" />\r\n            <Text style={styles.fieldTitle}>{field.name}</Text>\r\n          </View>\r\n          <View style={styles.fieldDetails}>\r\n            <Text style={styles.fieldDetail}>พื้นที่: {field.area} ไร่</Text>\r\n            <Text style={styles.fieldDetail}>ดิน: {field.soilType}</Text>\r\n            <Text style={styles.fieldDetail}>พืช: {field.crops[0].name}</Text>\r\n            <Text style={styles.fieldDetail}>สุขภาพ: {field.crops[0].healthScore}%</Text>\r\n          </View>\r\n          <View style={styles.fieldActions}>\r\n            <TouchableOpacity style={styles.actionButton}>\r\n              <Ionicons name=\"create\" size={16} color=\"#4CAF50\" />\r\n              <Text style={styles.actionButtonText}>แก้ไข</Text>\r\n            </TouchableOpacity>\r\n            <TouchableOpacity style={styles.actionButton}>\r\n              <Ionicons name=\"eye\" size={16} color=\"#4CAF50\" />\r\n              <Text style={styles.actionButtonText}>ดูรายละเอียด</Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n        </View>\r\n      ))}\r\n\r\n      {MVP && (\r\n        <View style={styles.mvpNotice}>\r\n          <Ionicons name=\"information-circle\" size={20} color=\"#FF9800\" />\r\n          <Text style={styles.mvpNoticeText}>\r\n            MVP: จำกัด 1 แปลง (อัปเกรดเพื่อเพิ่มเติม)\r\n          </Text>\r\n        </View>\r\n      )}\r\n    </ScrollView>\r\n  );\r\n\r\n  const renderScanScreen = () => (\r\n    <View style={styles.container}>\r\n      <View style={styles.header}>\r\n        <Text style={styles.headerTitle}>สแกนโรคพืช</Text>\r\n        <Text style={styles.headerSubtitle}>ใช้ AI ตรวจสอบสุขภาพพืช</Text>\r\n      </View>\r\n\r\n      <View style={styles.scanContainer}>\r\n        <View style={styles.scanPlaceholder}>\r\n          <Ionicons name=\"camera\" size={80} color=\"#4CAF50\" />\r\n          <Text style={styles.scanPlaceholderText}>กดเพื่อเปิดกล้อง</Text>\r\n          <Text style={styles.scanPlaceholderSubtext}>สแกนใบข้าวเพื่อตรวจโรค</Text>\r\n        </View>\r\n\r\n        <TouchableOpacity style={styles.scanButton} onPress={handleScan}>\r\n          <Ionicons name=\"scan\" size={24} color=\"white\" />\r\n          <Text style={styles.scanButtonText}>เริ่มสแกน</Text>\r\n        </TouchableOpacity>\r\n\r\n        {loading && (\r\n          <View style={styles.loadingContainer}>\r\n            <ActivityIndicator size=\"large\" color=\"#4CAF50\" />\r\n            <Text style={styles.loadingText}>กำลังวิเคราะห์...</Text>\r\n          </View>\r\n        )}\r\n      </View>\r\n\r\n      <View style={styles.scanTips}>\r\n        <Text style={styles.tipsTitle}>เคล็ดลับการสแกน:</Text>\r\n        <Text style={styles.tipText}>• ถ่ายภาพใบข้าวที่ชัดเจน</Text>\r\n        <Text style={styles.tipText}>• ใช้แสงธรรมชาติ</Text>\r\n        <Text style={styles.tipText}>• หลีกเลี่ยงเงาและแสงสะท้อน</Text>\r\n      </View>\r\n    </View>\r\n  );\r\n\r\n  const renderPricesScreen = () => (\r\n    <ScrollView style={styles.container}>\r\n      <View style={styles.header}>\r\n        <Text style={styles.headerTitle}>ราคาข้าว</Text>\r\n        <Text style={styles.headerSubtitle}>ราคาปัจจุบัน</Text>\r\n      </View>\r\n\r\n      <View style={styles.pricesContainer}>\r\n        {mockData.prices.map((price, index) => (\r\n          <View key={index} style={styles.priceCard}>\r\n            <View style={styles.priceHeader}>\r\n              <Text style={styles.commodityName}>{price.commodity}</Text>\r\n              <Text style={[\r\n                styles.priceChange,\r\n                price.change.startsWith('+') ? styles.priceUp : styles.priceDown\r\n              ]}>\r\n                {price.change}\r\n              </Text>\r\n            </View>\r\n            <Text style={styles.priceValue}>{price.price.toLocaleString()} {price.unit}</Text>\r\n          </View>\r\n        ))}\r\n      </View>\r\n\r\n      <View style={styles.mvpNotice}>\r\n        <Ionicons name=\"information-circle\" size={20} color=\"#FF9800\" />\r\n        <Text style={styles.mvpNoticeText}>\r\n          MVP: ราคาอ่านอย่างเดียว (อัปเกรดเพื่อแจ้งเตือนราคา)\r\n        </Text>\r\n      </View>\r\n    </ScrollView>\r\n  );\r\n\r\n  const renderContent = () => {\r\n    switch (activeTab) {\r\n      case 'home': return renderHomeScreen();\r\n      case 'fields': return renderFieldsScreen();\r\n      case 'scan': return renderScanScreen();\r\n      case 'prices': return renderPricesScreen();\r\n      default: return renderHomeScreen();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <StatusBar barStyle=\"dark-content\" backgroundColor=\"#2E7D32\" />\r\n      \r\n      {renderContent()}\r\n      \r\n      {/* Bottom Tab Navigation */}\r\n      <View style={styles.tabBar}>\r\n        <TouchableOpacity \r\n          style={[styles.tab, activeTab === 'home' && styles.activeTab]}\r\n          onPress={() => setActiveTab('home')}\r\n        >\r\n          <Ionicons \r\n            name={activeTab === 'home' ? 'home' : 'home-outline'} \r\n            size={24} \r\n            color={activeTab === 'home' ? '#4CAF50' : '#9E9E9E'} \r\n          />\r\n          <Text style={[styles.tabLabel, activeTab === 'home' && styles.activeTabLabel]}>\r\n            หน้าแรก\r\n          </Text>\r\n        </TouchableOpacity>\r\n\r\n        <TouchableOpacity \r\n          style={[styles.tab, activeTab === 'fields' && styles.activeTab]}\r\n          onPress={() => setActiveTab('fields')}\r\n        >\r\n          <Ionicons \r\n            name={activeTab === 'fields' ? 'location' : 'location-outline'} \r\n            size={24} \r\n            color={activeTab === 'fields' ? '#4CAF50' : '#9E9E9E'} \r\n          />\r\n          <Text style={[styles.tabLabel, activeTab === 'fields' && styles.activeTabLabel]}>\r\n            แปลง\r\n          </Text>\r\n        </TouchableOpacity>\r\n\r\n        <TouchableOpacity \r\n          style={[styles.tab, activeTab === 'scan' && styles.activeTab]}\r\n          onPress={() => setActiveTab('scan')}\r\n        >\r\n          <Ionicons \r\n            name={activeTab === 'scan' ? 'scan' : 'scan-outline'} \r\n            size={24} \r\n            color={activeTab === 'scan' ? '#4CAF50' : '#9E9E9E'} \r\n          />\r\n          <Text style={[styles.tabLabel, activeTab === 'scan' && styles.activeTabLabel]}>\r\n            สแกน\r\n          </Text>\r\n        </TouchableOpacity>\r\n\r\n        <TouchableOpacity \r\n          style={[styles.tab, activeTab === 'prices' && styles.activeTab]}\r\n          onPress={() => setActiveTab('prices')}\r\n        >\r\n          <Ionicons \r\n            name={activeTab === 'prices' ? 'trending-up' : 'trending-up-outline'} \r\n            size={24} \r\n            color={activeTab === 'prices' ? '#4CAF50' : '#9E9E9E'} \r\n          />\r\n          <Text style={[styles.tabLabel, activeTab === 'prices' && styles.activeTabLabel]}>\r\n            ราคา\r\n          </Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#f5f5f5',\r\n  },\r\n  header: {\r\n    backgroundColor: '#2E7D32',\r\n    padding: 20,\r\n    paddingTop: 10,\r\n  },\r\n  headerTitle: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    color: 'white',\r\n    marginBottom: 4,\r\n  },\r\n  headerSubtitle: {\r\n    fontSize: 16,\r\n    color: '#E8F5E8',\r\n  },\r\n  card: {\r\n    backgroundColor: 'white',\r\n    margin: 16,\r\n    padding: 16,\r\n    borderRadius: 12,\r\n    shadowColor: '#000',\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 4,\r\n    elevation: 3,\r\n  },\r\n  cardHeader: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginBottom: 12,\r\n  },\r\n  cardTitle: {\r\n    fontSize: 18,\r\n    fontWeight: '600',\r\n    color: '#333',\r\n    marginLeft: 8,\r\n  },\r\n  weatherInfo: {\r\n    alignItems: 'center',\r\n    marginBottom: 16,\r\n  },\r\n  temperature: {\r\n    fontSize: 48,\r\n    fontWeight: 'bold',\r\n    color: '#4CAF50',\r\n  },\r\n  condition: {\r\n    fontSize: 16,\r\n    color: '#666',\r\n    marginTop: 4,\r\n  },\r\n  humidity: {\r\n    fontSize: 14,\r\n    color: '#999',\r\n    marginTop: 2,\r\n  },\r\n  forecast: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-around',\r\n  },\r\n  forecastItem: {\r\n    alignItems: 'center',\r\n  },\r\n  forecastDay: {\r\n    fontSize: 12,\r\n    color: '#666',\r\n    marginBottom: 4,\r\n  },\r\n  forecastTemp: {\r\n    fontSize: 14,\r\n    fontWeight: '600',\r\n    color: '#333',\r\n    marginTop: 4,\r\n  },\r\n  fieldInfo: {\r\n    marginTop: 8,\r\n  },\r\n  fieldName: {\r\n    fontSize: 16,\r\n    fontWeight: '600',\r\n    color: '#333',\r\n    marginBottom: 4,\r\n  },\r\n  fieldArea: {\r\n    fontSize: 14,\r\n    color: '#666',\r\n    marginBottom: 2,\r\n  },\r\n  fieldSoil: {\r\n    fontSize: 14,\r\n    color: '#666',\r\n    marginBottom: 8,\r\n  },\r\n  cropInfo: {\r\n    backgroundColor: '#f8f9fa',\r\n    padding: 12,\r\n    borderRadius: 8,\r\n  },\r\n  cropName: {\r\n    fontSize: 14,\r\n    fontWeight: '600',\r\n    color: '#333',\r\n    marginBottom: 2,\r\n  },\r\n  cropStatus: {\r\n    fontSize: 12,\r\n    color: '#666',\r\n    marginBottom: 2,\r\n  },\r\n  cropHealth: {\r\n    fontSize: 12,\r\n    color: '#4CAF50',\r\n    fontWeight: '600',\r\n  },\r\n  taskItem: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n    paddingVertical: 12,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: '#f0f0f0',\r\n  },\r\n  taskInfo: {\r\n    flex: 1,\r\n  },\r\n  taskTitle: {\r\n    fontSize: 14,\r\n    fontWeight: '600',\r\n    color: '#333',\r\n    marginBottom: 2,\r\n  },\r\n  taskSubtitle: {\r\n    fontSize: 12,\r\n    color: '#666',\r\n  },\r\n  taskButton: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    paddingHorizontal: 12,\r\n    paddingVertical: 6,\r\n    borderRadius: 16,\r\n    borderWidth: 1,\r\n  },\r\n  taskButtonPending: {\r\n    borderColor: '#4CAF50',\r\n    backgroundColor: '#f8f9fa',\r\n  },\r\n  taskButtonCompleted: {\r\n    borderColor: '#ddd',\r\n    backgroundColor: '#f0f0f0',\r\n  },\r\n  taskButtonText: {\r\n    fontSize: 12,\r\n    marginLeft: 4,\r\n  },\r\n  taskButtonTextPending: {\r\n    color: '#4CAF50',\r\n  },\r\n  taskButtonTextCompleted: {\r\n    color: '#666',\r\n  },\r\n  scanButton: {\r\n    backgroundColor: '#4CAF50',\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    padding: 16,\r\n    margin: 16,\r\n    borderRadius: 12,\r\n  },\r\n  scanButtonText: {\r\n    color: 'white',\r\n    fontSize: 16,\r\n    fontWeight: '600',\r\n    marginLeft: 8,\r\n  },\r\n  fieldCard: {\r\n    backgroundColor: 'white',\r\n    margin: 16,\r\n    padding: 16,\r\n    borderRadius: 12,\r\n    shadowColor: '#000',\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 4,\r\n    elevation: 3,\r\n  },\r\n  fieldHeader: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginBottom: 12,\r\n  },\r\n  fieldTitle: {\r\n    fontSize: 18,\r\n    fontWeight: '600',\r\n    color: '#333',\r\n    marginLeft: 8,\r\n  },\r\n  fieldDetails: {\r\n    marginBottom: 16,\r\n  },\r\n  fieldDetail: {\r\n    fontSize: 14,\r\n    color: '#666',\r\n    marginBottom: 4,\r\n  },\r\n  fieldActions: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-around',\r\n  },\r\n  actionButton: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    paddingHorizontal: 16,\r\n    paddingVertical: 8,\r\n    borderRadius: 20,\r\n    borderWidth: 1,\r\n    borderColor: '#4CAF50',\r\n  },\r\n  actionButtonText: {\r\n    fontSize: 12,\r\n    color: '#4CAF50',\r\n    marginLeft: 4,\r\n  },\r\n  scanContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    padding: 20,\r\n  },\r\n  scanPlaceholder: {\r\n    alignItems: 'center',\r\n    marginBottom: 40,\r\n  },\r\n  scanPlaceholderText: {\r\n    fontSize: 18,\r\n    fontWeight: '600',\r\n    color: '#333',\r\n    marginTop: 16,\r\n  },\r\n  scanPlaceholderSubtext: {\r\n    fontSize: 14,\r\n    color: '#666',\r\n    marginTop: 4,\r\n  },\r\n  loadingContainer: {\r\n    alignItems: 'center',\r\n    marginTop: 20,\r\n  },\r\n  loadingText: {\r\n    fontSize: 14,\r\n    color: '#666',\r\n    marginTop: 8,\r\n  },\r\n  scanTips: {\r\n    backgroundColor: 'white',\r\n    margin: 16,\r\n    padding: 16,\r\n    borderRadius: 12,\r\n  },\r\n  tipsTitle: {\r\n    fontSize: 16,\r\n    fontWeight: '600',\r\n    color: '#333',\r\n    marginBottom: 8,\r\n  },\r\n  tipText: {\r\n    fontSize: 14,\r\n    color: '#666',\r\n    marginBottom: 4,\r\n  },\r\n  pricesContainer: {\r\n    padding: 16,\r\n  },\r\n  priceCard: {\r\n    backgroundColor: 'white',\r\n    padding: 16,\r\n    marginBottom: 12,\r\n    borderRadius: 12,\r\n    shadowColor: '#000',\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.1,\r\n    shadowRadius: 4,\r\n    elevation: 3,\r\n  },\r\n  priceHeader: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    marginBottom: 8,\r\n  },\r\n  commodityName: {\r\n    fontSize: 16,\r\n    fontWeight: '600',\r\n    color: '#333',\r\n  },\r\n  priceChange: {\r\n    fontSize: 14,\r\n    fontWeight: '600',\r\n  },\r\n  priceUp: {\r\n    color: '#4CAF50',\r\n  },\r\n  priceDown: {\r\n    color: '#f44336',\r\n  },\r\n  priceValue: {\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n    color: '#333',\r\n  },\r\n  mvpNotice: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    backgroundColor: '#FFF3E0',\r\n    padding: 12,\r\n    margin: 16,\r\n    borderRadius: 8,\r\n    borderLeftWidth: 4,\r\n    borderLeftColor: '#FF9800',\r\n  },\r\n  mvpNoticeText: {\r\n    fontSize: 12,\r\n    color: '#E65100',\r\n    marginLeft: 8,\r\n    flex: 1,\r\n  },\r\n  tabBar: {\r\n    flexDirection: 'row',\r\n    backgroundColor: '#2E7D32',\r\n    paddingVertical: 8,\r\n    paddingBottom: 20,\r\n  },\r\n  tab: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    paddingVertical: 8,\r\n  },\r\n  activeTab: {\r\n    backgroundColor: 'rgba(255, 255, 255, 0.1)',\r\n    borderRadius: 8,\r\n    marginHorizontal: 4,\r\n  },\r\n  tabLabel: {\r\n    fontSize: 12,\r\n    color: '#9E9E9E',\r\n    marginTop: 4,\r\n  },\r\n  activeTabLabel: {\r\n    color: '#4CAF50',\r\n    fontWeight: '600',\r\n  },\r\n});\r\n"
    },
    "package.json": {
      "type": "CODE",
      "contents": "{\r\n  \"name\": \"rai-ai-mobile-preview\",\r\n  \"version\": \"1.0.0\",\r\n  \"main\": \"expo-snack-preview.js\",\r\n  \"dependencies\": {\r\n    \"expo\": \"~49.0.0\",\r\n    \"expo-status-bar\": \"~1.6.0\",\r\n    \"react\": \"18.2.0\",\r\n    \"react-native\": \"0.72.6\",\r\n    \"@expo/vector-icons\": \"^13.0.0\"\r\n  }\r\n}\r\n"
    }
  }
}